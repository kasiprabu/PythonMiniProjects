Simple Arithmetic functions:

Additon:

import numpy as np

arr1 = np.array([10, 11, 12, 13, 14, 15])
arr2 = np.array([20, 21, 22, 23, 24, 25])

newarr = np.add(arr1, arr2)

print(newarr)

Subtraction: 

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])

newarr = np.subtract(arr1, arr2)

print(newarr)

Multiplication:

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])

newarr = np.multiply(arr1, arr2)

print(newarr)


Division:

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 10, 8, 2, 33])

newarr = np.divide(arr1, arr2)

print(newarr)

Power:

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 6, 8, 2, 33])

newarr = np.power(arr1, arr2)

print(newarr)


Remainder:

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])

newarr = np.mod(arr1, arr2)

print(newarr)

Quotient and Mod:

import numpy as np

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])

newarr = np.divmod(arr1, arr2)

print(newarr)

Absolute Values:

import numpy as np

arr = np.array([-1, -2, 1, 2, 3, -4])

newarr = np.absolute(arr)

print(newarr)

===========================================================================

Rounding Decimals:

Truncation:

import numpy as np

arr = np.trunc([-3.1666, 3.6667])

print(arr)


[-3.  3.]


Fix:

import numpy as np

arr = np.fix([-3.1666, 3.6667])

print(arr)

[-3.  3.]


Rounding:

import numpy as np

arr = np.around(3.1666, 2)

print(arr)

3.17

Floor:

import numpy as np

arr = np.floor([-3.1666, 3.6667])

print(arr)

[-4.  3.]

Ceil:

import numpy as np

arr = np.ceil([-3.1666, 3.6667])

print(arr)
==============================================================================

NumPy Logs

Log at Base 2

import numpy as np

arr = np.arange(1, 10)

print(np.log2(arr))

[0.         1.         1.5849625  2.         2.32192809 2.5849625
 2.80735492 3.         3.169925  ]
 
Log at Base 10

import numpy as np

arr = np.arange(1, 10)

print(np.log10(arr))

[0.         0.30103    0.47712125 0.60205999 0.69897    0.77815125
 0.84509804 0.90308999 0.95424251]


Natural Log, or Log at Base e:

import numpy as np

arr = np.arange(1, 10)

print(np.log(arr))


[0.         0.69314718 1.09861229 1.38629436 1.60943791 1.79175947
 1.94591015 2.07944154 2.19722458]


Log at Any Base
NumPy does not provide any function to take log at any base, so we can use the frompyfunc() function along with inbuilt function math.log() with two input parameters and one output parameter:

from math import log
import numpy as np

nplog = np.frompyfunc(log, 2, 1)

print(nplog(100, 15))


1.7005483074552052
=================================================================================== 
 Summations
What is the difference between summation and addition?

Addition is done between two arguments whereas summation happens over n elements.

import numpy as np

arr1 = np.array([1, 2, 3])
arr2 = np.array([1, 2, 3])

newarr = np.sum([arr1, arr2])

print(newarr)

12

Summation Over an Axis:

import numpy as np

arr1 = np.array([1, 2, 3])
arr2 = np.array([1, 2, 3])

newarr = np.sum([arr1, arr2], axis=1)

print(newarr)

[6,6]

Cummulative Sum:
import numpy as np

arr = np.array([1, 2, 3])

newarr = np.cumsum(arr)

print(newarr)

[1 3 6]
=========================================================================
NumPy Products

import numpy as np

arr = np.array([1, 2, 3, 4])

x = np.prod(arr)

print(x)

24

import numpy as np

arr1 = np.array([1, 2, 3, 4])
arr2 = np.array([5, 6, 7, 8])

x = np.prod([arr1, arr2])

print(x)


40320 because 1*2*3*4*5*6*7*8 = 40320

Product Over an Axis:

mport numpy as np

arr1 = np.array([1, 2, 3, 4])
arr2 = np.array([5, 6, 7, 8])

newarr = np.prod([arr1, arr2], axis=1)

print(newarr)

Returns: [24 1680]


Cummulative Product:

import numpy as np

arr = np.array([5, 6, 7, 8])

newarr = np.cumprod(arr)

print(newarr)

Returns: [5 30 210 1680]
============================================================================